{
	"info": {
		"_postman_id": "a47d3993-8465-4262-b990-e6fcd88a93ee",
		"name": "qa-slack-poc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Messages",
			"item": [
				{
					"name": "Send a new message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b18064d9-ad88-47ff-b3da-0de10e850576",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate message",
									"var responseJSON = JSON.parse(responseBody);",
									"var message = responseJSON.message;",
									"",
									"pm.test(\"Validate content message\", function() {",
									"  pm.expect(message[\"text\"]).to.eql(\"Test\");",
									"});",
									"",
									"//Verify status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//Validate JSON schema",
									"const sendNewMessageSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"channel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ts\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"bot_id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"text\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"user\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"ts\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"team\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bot_profile\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"deleted\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"updated\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"app_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"image_36\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_48\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_72\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"image_36\",",
									"                \"image_48\",",
									"                \"image_72\"",
									"              ]",
									"            },",
									"            \"team_id\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"deleted\",",
									"            \"name\",",
									"            \"updated\",",
									"            \"app_id\",",
									"            \"icons\",",
									"            \"team_id\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"bot_id\",",
									"        \"type\",",
									"        \"text\",",
									"        \"user\",",
									"        \"ts\",",
									"        \"team\",",
									"        \"bot_profile\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"channel\",",
									"    \"ts\",",
									"    \"message\"",
									"  ]",
									"};",
									"",
									"var newMessage = JSON.parse(responseBody);",
									"tests[\"Message Schema is valid\"] = tv4.validate(newMessage, sendNewMessageSchema);",
									"",
									"var message = JSON.parse(responseBody);",
									"pm.environment.set(\"messageTs\", message.ts);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "C014QLUC686",
									"type": "text"
								},
								{
									"key": "text",
									"value": "Test",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://slack.com/api/chat.postMessage",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"chat.postMessage"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d091972-2ebe-46ce-8728-488d5d15f55b",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const updateMessageSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"channel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ts\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"text\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"bot_id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"text\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"user\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"team\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bot_profile\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"deleted\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"updated\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"app_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"image_36\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_48\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_72\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"image_36\",",
									"                \"image_48\",",
									"                \"image_72\"",
									"              ]",
									"            },",
									"            \"team_id\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"deleted\",",
									"            \"name\",",
									"            \"updated\",",
									"            \"app_id\",",
									"            \"icons\",",
									"            \"team_id\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"bot_id\",",
									"        \"type\",",
									"        \"text\",",
									"        \"user\",",
									"        \"team\",",
									"        \"bot_profile\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"channel\",",
									"    \"ts\",",
									"    \"text\",",
									"    \"message\"",
									"  ]",
									"};",
									"",
									"var updateMessage = JSON.parse(responseBody);",
									"tests[\"Updated message Schema is valid\"] = tv4.validate(updateMessage, updateMessageSchema);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f6239b4-9b76-449b-a2f9-68cdb7235810",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "C014QLUC686",
									"type": "text"
								},
								{
									"key": "ts",
									"value": "{{messageTs}}",
									"type": "text"
								},
								{
									"key": "text",
									"value": "Post modified",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://slack.com/api/chat.update",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"chat.update"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7204558-43ee-4ef4-aa7b-b006bd6e1307",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const deleteMessageSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"channel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ts\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"channel\",",
									"    \"ts\"",
									"  ]",
									"};",
									"",
									"var deleteMessage = JSON.parse(responseBody);",
									"tests[\"Delete message Schema is valid\"] = tv4.validate(deleteMessage, deleteMessageSchema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "C014QLUC686",
									"type": "text"
								},
								{
									"key": "ts",
									"value": "{{messageTs}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://slack.com/api/chat.delete",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"chat.delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f44d258-2bb8-479a-a4b4-1c7ec0cf75cd",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//Validate message",
									"var responseJSON = JSON.parse(responseBody);",
									"var message = responseJSON.message;",
									"",
									"pm.test(\"Validate content message\", function() {",
									"  pm.expect(message[\"text\"]).to.eql(\"Upcoming messages\");",
									"});",
									"",
									"// Validate JSON schema",
									"const scheduleMessageSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"scheduled_message_id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"channel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"post_at\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"bot_id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"text\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"user\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"team\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"bot_profile\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"deleted\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"updated\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"app_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"icons\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"image_36\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_48\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"image_72\": {",
									"                  \"type\": \"string\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"image_36\",",
									"                \"image_48\",",
									"                \"image_72\"",
									"              ]",
									"            },",
									"            \"team_id\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"deleted\",",
									"            \"name\",",
									"            \"updated\",",
									"            \"app_id\",",
									"            \"icons\",",
									"            \"team_id\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"bot_id\",",
									"        \"type\",",
									"        \"text\",",
									"        \"user\",",
									"        \"team\",",
									"        \"bot_profile\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"scheduled_message_id\",",
									"    \"channel\",",
									"    \"post_at\",",
									"    \"message\"",
									"  ]",
									"};",
									"",
									"var scheduleMessage = JSON.parse(responseBody);",
									"tests[\"Schedule message Schema is valid\"] = tv4.validate(scheduleMessage, scheduleMessageSchema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "C014QLUC686",
									"type": "text"
								},
								{
									"key": "post_at",
									"value": "1593551505",
									"type": "text"
								},
								{
									"key": "text",
									"value": "Upcoming messages",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://slack.com/api/chat.scheduleMessage",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"chat.scheduleMessage"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "09e6392b-7951-4827-bbf3-ffafa9abb3e8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0aa89523-0a22-4595-b01e-03d9366b9b43",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Checks Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc16974c-b9d0-4d3f-a043-7fc7135689d7",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const autehnticationCheckSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"url\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"team\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"user\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"team_id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"user_id\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"url\",",
									"    \"team\",",
									"    \"user\",",
									"    \"team_id\",",
									"    \"user_id\"",
									"  ]",
									"};",
									"",
									"var autehnticationCheck = JSON.parse(responseBody);",
									"tests[\"Check authentication Schema is valid\"] = tv4.validate(autehnticationCheck, autehnticationCheckSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://slack.com/api/auth.test",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"auth.test"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Read profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1053b6a5-b1c3-4ec5-a136-420d4d747e27",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//Validate details",
									"var responseJSON = JSON.parse(responseBody);",
									"var profile = responseJSON.profile;",
									"",
									"pm.test(\"Validate user details\", function() {",
									"  pm.expect(profile[\"real_name\"]).to.eql(\"zoam21\");",
									"  pm.expect(profile[\"real_name_normalized\"]).to.eql(\"zoam21\");",
									"  pm.expect(profile[\"email\"]).to.eql(\"zoam21@icloud.com\");",
									"});",
									"",
									"// Validate JSON schema",
									"const readProfileSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"profile\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"title\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"phone\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"skype\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"real_name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"real_name_normalized\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"display_name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"display_name_normalized\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"fields\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"status_text\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status_emoji\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status_expiration\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"avatar_hash\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_24\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_32\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_48\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_72\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_192\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"image_512\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status_text_canonical\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"title\",",
									"        \"phone\",",
									"        \"skype\",",
									"        \"real_name\",",
									"        \"real_name_normalized\",",
									"        \"display_name\",",
									"        \"display_name_normalized\",",
									"        \"fields\",",
									"        \"status_text\",",
									"        \"status_emoji\",",
									"        \"status_expiration\",",
									"        \"avatar_hash\",",
									"        \"email\",",
									"        \"image_24\",",
									"        \"image_32\",",
									"        \"image_48\",",
									"        \"image_72\",",
									"        \"image_192\",",
									"        \"image_512\",",
									"        \"status_text_canonical\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"profile\"",
									"  ]",
									"};",
									"",
									"var readProfile = JSON.parse(responseBody);",
									"tests[\"Read profile Schema is valid\"] = tv4.validate(readProfile, readProfileSchema);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://slack.com/api/users.profile.get",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"users.profile.get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e25ddcc-418e-4e2a-9058-ffe9a9f87fa2",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const setActiveSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\"",
									"  ]",
									"};",
									"",
									"var setActive = JSON.parse(responseBody);",
									"tests[\"Set Active Schema is valid\"] = tv4.validate(setActive, setActiveSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://slack.com/api/users.setActive",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"users.setActive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Presence",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1a90893-8e0b-4077-9fdc-dacd623729a5",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const setPresenceSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\"",
									"  ]",
									"};",
									"",
									"var setPresence = JSON.parse(responseBody);",
									"tests[\"Set Active Schema is valid\"] = tv4.validate(setPresence, setPresenceSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "presence",
									"value": "auto",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://slack.com/api/users.setPresence",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"users.setPresence"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "Create conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c420dc08-4712-4b26-867f-5dee594fe603",
								"exec": [
									"var conversation = JSON.parse(responseBody);",
									"pm.environment.set(\"conversationId\", conversation.channel.id);",
									"",
									"// Validate JSON schema",
									"const createConversationSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"channel\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_channel\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_group\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_im\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"created\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"is_archived\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_general\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"unlinked\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name_normalized\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"parent_conversation\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"creator\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_ext_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_org_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"shared_team_ids\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            }",
									"          ]",
									"        },",
									"        \"pending_shared\": {",
									"          \"type\": \"array\",",
									"          \"items\": {}",
									"        },",
									"        \"pending_connected_team_ids\": {",
									"          \"type\": \"array\",",
									"          \"items\": {}",
									"        },",
									"        \"is_pending_ext_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_member\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_private\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_mpim\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"last_read\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"topic\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"value\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"creator\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"last_set\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"value\",",
									"            \"creator\",",
									"            \"last_set\"",
									"          ]",
									"        },",
									"        \"purpose\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"value\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"creator\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"last_set\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"value\",",
									"            \"creator\",",
									"            \"last_set\"",
									"          ]",
									"        },",
									"        \"previous_names\": {",
									"          \"type\": \"array\",",
									"          \"items\": {}",
									"        },",
									"        \"priority\": {",
									"          \"type\": \"integer\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"is_channel\",",
									"        \"is_group\",",
									"        \"is_im\",",
									"        \"created\",",
									"        \"is_archived\",",
									"        \"is_general\",",
									"        \"unlinked\",",
									"        \"name_normalized\",",
									"        \"is_shared\",",
									"        \"parent_conversation\",",
									"        \"creator\",",
									"        \"is_ext_shared\",",
									"        \"is_org_shared\",",
									"        \"shared_team_ids\",",
									"        \"pending_shared\",",
									"        \"pending_connected_team_ids\",",
									"        \"is_pending_ext_shared\",",
									"        \"is_member\",",
									"        \"is_private\",",
									"        \"is_mpim\",",
									"        \"last_read\",",
									"        \"topic\",",
									"        \"purpose\",",
									"        \"previous_names\",",
									"        \"priority\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\",",
									"    \"channel\"",
									"  ]",
									"};",
									"",
									"var createConversation = JSON.parse(responseBody);",
									"tests[\"Create conversation Schema is valid\"] = tv4.validate(createConversation, createConversationSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "-cyp-{{$randomAlphaNumeric}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://slack.com/api/conversations.create",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"conversations.create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc828bc2-1125-4080-8d6c-7931dedfb67b",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const renameConversationSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"channel\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_channel\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_group\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_im\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"created\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"is_archived\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_general\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"unlinked\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name_normalized\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"parent_conversation\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"creator\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"is_ext_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_org_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"shared_team_ids\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            }",
									"          ]",
									"        },",
									"        \"pending_shared\": {",
									"          \"type\": \"array\",",
									"          \"items\": {}",
									"        },",
									"        \"pending_connected_team_ids\": {",
									"          \"type\": \"array\",",
									"          \"items\": {}",
									"        },",
									"        \"is_pending_ext_shared\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_member\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_private\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"is_mpim\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"last_read\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"topic\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"value\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"creator\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"last_set\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"value\",",
									"            \"creator\",",
									"            \"last_set\"",
									"          ]",
									"        },",
									"        \"purpose\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"value\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"creator\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"last_set\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"value\",",
									"            \"creator\",",
									"            \"last_set\"",
									"          ]",
									"        },",
									"        \"previous_names\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            }",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"is_channel\",",
									"        \"is_group\",",
									"        \"is_im\",",
									"        \"created\",",
									"        \"is_archived\",",
									"        \"is_general\",",
									"        \"unlinked\",",
									"        \"name_normalized\",",
									"        \"is_shared\",",
									"        \"parent_conversation\",",
									"        \"creator\",",
									"        \"is_ext_shared\",",
									"        \"is_org_shared\",",
									"        \"shared_team_ids\",",
									"        \"pending_shared\",",
									"        \"pending_connected_team_ids\",",
									"        \"is_pending_ext_shared\",",
									"        \"is_member\",",
									"        \"is_private\",",
									"        \"is_mpim\",",
									"        \"last_read\",",
									"        \"topic\",",
									"        \"purpose\",",
									"        \"previous_names\"",
									"      ]",
									"    },",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"channel\",",
									"    \"ok\"",
									"  ]",
									"};",
									"",
									"var renameConversation = JSON.parse(responseBody);",
									"tests[\"Rename conversation Schema is valid\"] = tv4.validate(renameConversation, renameConversationSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "{{conversationId}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "new{{$randomAlphaNumeric}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://slack.com/api/conversations.rename",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"conversations.rename"
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a94e9c60-9ae5-431d-97ae-e8549d3f7216",
								"exec": [
									"// Verify status code.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response have content.",
									"pm.test(\"Response must have a valid content\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"// Validate JSON schema",
									"const leaveConversationSchema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"ok\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"ok\"",
									"  ]",
									"};",
									"",
									"var leaveConversation = JSON.parse(responseBody);",
									"tests[\"Leave conversation Schema is valid\"] = tv4.validate(leaveConversation, leaveConversationSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "xoxp-1180064416993-1191277642304-1184057044598-e015254b3c1006cb6fa3fa73db4d2a52",
									"type": "string"
								},
								{
									"key": "tokenType",
									"type": "any"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "{{conversationId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://slack.com/api/conversations.leave",
							"protocol": "https",
							"host": [
								"slack",
								"com"
							],
							"path": [
								"api",
								"conversations.leave"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "18d81ef1-731c-490e-b06f-69b2c6191315",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}